---
layout: layout.njk
title: ◎
---

<div class="map-wrap">
  {% include "world.svg" %}
</div>

<script>
(() => {
  const svg = document.querySelector('.map');
  if (!svg) return;

  const vb0 = svg.viewBox.baseVal;
  const state = { x: vb0.x, y: vb0.y, w: vb0.width, h: vb0.height };

  const setVB = () =>
    svg.setAttribute('viewBox', `${state.x} ${state.y} ${state.w} ${state.h}`);

  // drag state
  let active = false, panning = false, startedOnLink = false, pid = null;
  let startX = 0, startY = 0, lastX = 0, lastY = 0;
  let suppressNextClick = false;
  const THRESH = 4; // px before we treat as a drag

  svg.addEventListener('pointerdown', e => {
    if (e.pointerType === 'mouse' && e.button !== 0) return; // left click only
    active = true; panning = false; suppressNextClick = false;
    startedOnLink = !!e.target.closest('a');
    pid = e.pointerId;
    startX = lastX = e.clientX;
    startY = lastY = e.clientY;
  });

  svg.addEventListener('pointermove', e => {
    if (!active || e.pointerId !== pid) return;

    const moved = Math.hypot(e.clientX - startX, e.clientY - startY);
    if (!panning && moved > THRESH) {
      panning = true;
      suppressNextClick = true;               // we’re dragging, not clicking
      if (!startedOnLink) svg.setPointerCapture?.(pid); // don't capture if started on a link
    }
    if (!panning) return;

    const dx = (e.clientX - lastX) * (state.w / svg.clientWidth);
    const dy = (e.clientY - lastY) * (state.h / svg.clientHeight);
    state.x -= dx; state.y -= dy;
    lastX = e.clientX; lastY = e.clientY;
    setVB();
  });

  function endPan(){
    active = false; panning = false; startedOnLink = false;
    if (pid != null) { try { svg.releasePointerCapture?.(pid); } catch {} }
    pid = null;
  }
  svg.addEventListener('pointerup', endPan);
  svg.addEventListener('pointercancel', endPan);
  svg.addEventListener('pointerleave', () => { if (!panning) endPan(); });

  // If we dragged, block the click so links don’t fire accidentally
  svg.addEventListener('click', e => {
    if (suppressNextClick) {
      e.preventDefault();
      e.stopPropagation();
      suppressNextClick = false;
    }
  }, true); // capture so it runs before <a> navigation

  // wheel zoom (cursor-centered)
  svg.addEventListener('wheel', e => {
    e.preventDefault();
    const factor = (e.deltaY > 0 ? 1.1 : 0.9);
    const px = e.offsetX / svg.clientWidth;
    const py = e.offsetY / svg.clientHeight;
    const cx = state.x + px * state.w;
    const cy = state.y + py * state.h;
    state.w *= factor; state.h = state.w * (vb0.height / vb0.width);
    state.x = cx - px * state.w;
    state.y = cy - py * state.h;
    setVB();
  }, { passive:false });
})();
</script>

